{"version":3,"sources":["logo.svg","Chords/MajorScale.js","Chords/Chord.js","Chords/Chords.js","Chords/ChordProgression.js","Piano/Samples.js","Piano/Piano.js","Drums/Kick.js","Drums/Snare.js","Drums/Hat.js","Drums/Noise.js","Components/Visualizer.js","Components/Player.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","majorScale","Chord","degree","intervals","nextChordIdxs","this","semitoneDist","Math","floor","random","length","size","slice","voicing","sort","i","unshift","toChordIdxs","arr","map","n","Chords","ChordProgression","progression","chord","push","nextChordIdx","octaves","samplePath","process","notes","forEach","letter","octave","samples","note","noteFilename","includes","replace","lpf","Tone","sw","Piano","cb","sampler","Samples","chain","C4","vol","Kick","Snare","Hat","noise","fft","Visualizer","props","useState","getValue","freqs","setFreqs","reqRef","useRef","animate","current","requestAnimationFrame","useEffect","audio","connect","cancelAnimationFrame","className","v","height","max","key","style","keys","cmp","bpm","value","swing","Player","nextChord","nextProgress","state","progress","nextKickOff","nextSnareOff","nextHatOff","setState","kickOff","snareOff","hatOff","nextMelodyDensity","melodyDensity","playChord","root","transpose","generateVoicing","harmonize","f","toNote","pn","triggerAttackRelease","playMelody","scale","noteIdx","generateProgression","generate","genChordsOnce","toggle","stop","start","chords","melody","kickLoop","snareLoop","hatLoop","pianoLoaded","kickLoaded","snareLoaded","hatLoaded","contextStarted","kick","snare","hat","Noise","time","triggerAttack","humanize","bind","progressionList","idx","prep","onClick","playable","toLowerCase","visual","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.07754ee5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","const majorScale = [0,2,4,5,7,9,11];\r\n\r\nexport default majorScale;","import MajorScale from './MajorScale';\r\nimport majorScale from './MajorScale';\r\n\r\nclass Chord {\r\n    constructor(degree,intervals,nextChordIdxs) {\r\n        this.degree = degree;\r\n        this.semitoneDist = majorScale[degree-1];\r\n        this.intervals = intervals;\r\n        this.nextChordIdxs = nextChordIdxs;\r\n    }\r\n    \r\n    degree() {\r\n    \treturn this.degree;\r\n    }\r\n\r\n    semitoneDist() {\r\n        return this.semitoneDist;\r\n    }\r\n\r\n    intervals() {\r\n        return this.intervals;\r\n    }\r\n\r\n    nextChordIdxs() {\r\n        return this.nextChordIdxs;\r\n    }\r\n\r\n    nextChordIdx() {\r\n        return this.nextChordIdxs[Math.floor(Math.random()*this.nextChordIdxs.length)];\r\n    }\r\n\r\n    generateVoicing(size) {\r\n        if(size<3)\r\n            return this.intervals.slice(0,3);\r\n        let voicing = this.intervals.slice(1,size);\r\n        voicing.sort(() => Math.random()-0.5);\r\n        for(let i = 1; i<voicing.length; i++) {\r\n            while(voicing[i] < voicing[i-1]){\r\n                voicing[i] += 12;\r\n            }\r\n        }\r\n        voicing.unshift(0);\r\n        return voicing;\r\n    }\r\n}\r\n\r\nexport default Chord;","import Chord from './Chord';\r\n\r\nconst toChordIdxs = (arr) => arr.map(n => n-1);\r\n\r\nconst I = new Chord(\r\n\t1,\r\n    [0,4,7,11,14,17,21],\r\n    toChordIdxs([2,3,4,5,6,7])\r\n);\r\nconst ii = new Chord(\r\n\t2,\r\n    [0,3,7,10,14,17,21],\r\n    toChordIdxs([3,5,7])\r\n);\r\nconst iii = new Chord(\r\n\t3,\r\n    [0,3,7,10,13,17,20],\r\n    toChordIdxs([4,6])\r\n);\r\nconst IV = new Chord(\r\n\t4,\r\n    [0,4,7,11,14,18,21],\r\n    toChordIdxs([2,5])\r\n);\r\nconst V = new Chord(\r\n\t5,\r\n    [0,4,7,10,14,17,21],\r\n    toChordIdxs([1,3,6])\r\n);\r\nconst vi = new Chord(\r\n\t6,\r\n    [0,3,7,10,14,17,20],\r\n    toChordIdxs([2,4])\r\n);\r\nconst vii = new Chord(\r\n\t7,\r\n    [0,3,6,10,13,17,20],\r\n    toChordIdxs([1,3])\r\n);\r\n\r\nconst Chords = [I,ii,iii,IV,V,vi,vii];\r\n\r\nexport default Chords;","import Chords from './Chords';\r\nimport Chord from './Chord';\r\n\r\nclass ChordProgression {\r\n    static generate(length) {\r\n        if(length < 2)\r\n            return null;\r\n\r\n        const progression = [];\r\n        let chord = Chords[Math.floor(Math.random()*Chords.length)];\r\n        \r\n        for(let i = 0; i < length; i++) {\r\n            progression.push(new Chord(\r\n                chord.degree,\r\n                [...chord.intervals],\r\n                [...chord.nextChordIdxs]));\r\n            chord = Chords[chord.nextChordIdx()];\r\n        }\r\n        \r\n        return progression;\r\n    }\r\n}\r\n\r\nexport default ChordProgression;","const letters = [\"A\",\"C\",\"D#\",\"F#\"];\r\nconst octaves = [1, 2, 3, 4, 5, 6];\r\nconst samplePath = `${process.env.PUBLIC_URL}/PianoSamples/`;\r\nconst velocity = 1;\r\n\r\nconst notes = [];\r\n\r\nletters.forEach(letter => {\r\n    octaves.forEach(octave => {\r\n        notes.push(letter+octave);\r\n    });\r\n});\r\n\r\nconst samples = {};\r\n\r\nnotes.forEach(note => {\r\n    let noteFilename = note;\r\n    if(note.includes(\"#\")) {\r\n        noteFilename = note.replace(\"#\",\"sharp\");\r\n    }\r\n    samples[note] = `${samplePath+noteFilename}v${velocity}.wav`;\r\n});\r\n\r\nexport default samples;","import * as Tone from 'tone';\r\nimport Samples from './Samples';\r\n\r\nconst lpf = new Tone.Filter(1000, \"lowpass\");\r\nconst sw = new Tone.StereoWidener(0.5);\r\n\r\nclass Piano {\r\n\tconstructor(cb) {\r\n\t\tthis.sampler = new Tone.Sampler(Samples, () => {\r\n\t\t\tcb();\r\n\t\t}).chain(lpf,sw,Tone.Master);\r\n\t}\r\n\r\n\tsampler() {\r\n\t\treturn this.sampler;\r\n\t}\r\n}\r\n\r\nexport default Piano;","import * as Tone from 'tone';\r\n\r\nconst samplePath = `${process.env.PUBLIC_URL}/DrumSamples/kick.wav`;\r\nconst samples = {C4: samplePath};\r\n\r\nconst vol = new Tone.Volume(-3);\r\n\r\nclass Kick {\r\n\tconstructor(cb) {\r\n\t\tthis.sampler = new Tone.Sampler(samples, () => {\r\n\t\t\tcb();\r\n\t\t}).chain(vol,Tone.Master);\r\n\t}\r\n\r\n\tsampler() {\r\n\t\treturn this.sampler;\r\n\t}\r\n}\r\n\r\nexport default Kick;","import * as Tone from 'tone';\r\n\r\nconst samplePath = `${process.env.PUBLIC_URL}/DrumSamples/snare.wav`;\r\nconst samples = {C4: samplePath};\r\n\r\nconst lpf = new Tone.Filter(6000, \"lowpass\");\r\nconst vol = new Tone.Volume(-6);\r\nconst sw = new Tone.StereoWidener(0.3);\r\n\r\nclass Snare {\r\n\tconstructor(cb) {\r\n\t\tthis.sampler = new Tone.Sampler(samples, () => {\r\n\t\t\tcb();\r\n\t\t}).chain(lpf,vol,sw,Tone.Master);\r\n\t}\r\n\r\n\tsampler() {\r\n\t\treturn this.sampler;\r\n\t}\r\n}\r\n\r\nexport default Snare;","import * as Tone from 'tone';\r\n\r\nconst samplePath = `${process.env.PUBLIC_URL}/DrumSamples/hat.wav`;\r\nconst samples = {C4: samplePath};\r\n\r\nconst lpf = new Tone.Filter(2400, \"lowpass\");\r\nconst vol = new Tone.Volume(-9);\r\nconst sw = new Tone.StereoWidener(0.7);\r\n\r\nclass Hat {\r\n\tconstructor(cb) {\r\n\t\tthis.sampler = new Tone.Sampler(samples, () => {\r\n\t\t\tcb();\r\n\t\t}).chain(lpf,vol,sw,Tone.Master);\r\n\t}\r\n\r\n\tsampler() {\r\n\t\treturn this.sampler;\r\n\t}\r\n}\r\n\r\nexport default Hat;","import * as Tone from 'tone';\r\n\r\nconst lpf = new Tone.Filter(2000, \"lowshelf\");\r\nconst vol = new Tone.Volume(-32);\r\nconst noise = new Tone.Noise(\"pink\").chain(lpf,vol,Tone.Master);\r\n\r\nexport default noise;","import React, { useState, useEffect, useRef } from 'react';\r\nimport * as Tone from 'tone';\r\n\r\nconst fft = new Tone.FFT(16);\r\n\r\nconst Visualizer = (props) => {\r\n\r\n    const [freqs,setFreqs] = useState([...fft.getValue()]);\r\n    const reqRef = useRef();\r\n\r\n    const animate = () => {\r\n        setFreqs([...fft.getValue()]);\r\n        reqRef.current = requestAnimationFrame(animate);\r\n    }\r\n\r\n    useEffect(() => {\r\n        props.audio.connect(fft);\r\n\r\n        reqRef.current = requestAnimationFrame(animate);\r\n        return () => cancelAnimationFrame(reqRef.current);\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"freqList\">\r\n            {freqs.map((v,i) => {\r\n\r\n                const height = Math.max(3*(69+0.5*v),10); \r\n                return(\r\n                    <div key={i}\r\n                        className=\"freqBar\"\r\n                        style={{\r\n                            height: `${height}px`,\r\n                        }}>\r\n                        \r\n                    </div>);\r\n            })}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Visualizer;","import React, {Component} from 'react';\r\nimport * as Tone from 'tone';\r\nimport ChordProgression from '../Chords/ChordProgression';\r\nimport Piano from '../Piano/Piano';\r\nimport Kick from '../Drums/Kick';\r\nimport Snare from '../Drums/Snare';\r\nimport Hat from '../Drums/Hat';\r\nimport Noise from '../Drums/Noise';\r\nimport Visualizer from './Visualizer';\r\n\r\nconst keys = [\"C\",\"C#\",\"D\",\"D#\",\"E\",\"F\",\"F#\",\"G\",\"G#\",\"A\",\"A#\",\"B\"];\r\n\r\nconst cmp = new Tone.Compressor({\r\n\t\"threshold\" : -6,\r\n\t\"ratio\" : 3,\r\n\t\"attack\" : 0.5,\r\n\t\"release\" : 0.1\r\n});\r\nconst lpf = new Tone.Filter(2000, \"lowpass\");\r\nconst vol = new Tone.Volume(-6);\r\nTone.Master.chain(cmp,lpf,vol);\r\nTone.Transport.bpm.value = 156;\r\nTone.Transport.swing = 1;\r\n\r\nclass Player extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            key: \"C\",\r\n            progression: [],\r\n            progress: 0,\r\n            pianoLoaded: false,\r\n            kickLoaded: false,\r\n            snareLoaded: false,\r\n            hatLoaded: false,\r\n            contextStarted: false,\r\n            genChordsOnce: false,\r\n            kickOff: false,\r\n            snareOff: false,\r\n            hatOff: false,\r\n            melodyDensity: 0.33,\r\n        }\r\n\r\n        this.pn = new Piano(() => this.setState({...this.state, pianoLoaded: true})).sampler;\r\n        this.kick = new Kick(() => this.setState({...this.state, kickLoaded: true})).sampler;\r\n        this.snare = new Snare(() => this.setState({...this.state, snareLoaded: true})).sampler;\r\n        this.hat = new Hat(() => this.setState({...this.state, hatLoaded: true})).sampler;\r\n        this.noise = Noise;\r\n\r\n        this.chords = new Tone.Loop(this.playChord,\"1n\");\r\n        this.melody = new Tone.Loop(this.playMelody,\"8n\");\r\n\r\n\r\n        this.kickLoop = new Tone.Sequence((time,note) => {\r\n            if(!this.state.kickOff) {\r\n                if(note===\"C4\" && Math.random()<0.9) {\r\n                    this.kick.triggerAttack(note);\r\n                } else if(note===\".\" && Math.random()<0.1) {\r\n                    this.kick.triggerAttack(\"C4\");\r\n                }\r\n            }\r\n            \r\n        }, [\"C4\",\"\",\"\",\"\", \"\",\"\",\"\",\"C4\", \"C4\",\"\",\".\",\"\", \"\",\"\",\"\",\"\"],\"8n\");\r\n\r\n        this.snareLoop = new Tone.Sequence((time,note) => {\r\n            if(!this.state.snareOff) {\r\n                if(note!==\"\" && Math.random()<0.80) {\r\n                    this.snare.triggerAttack(note);\r\n                }\r\n            }\r\n        }, [\"\",\"C4\"], \"2n\");\r\n\r\n        this.hatLoop = new Tone.Sequence((time,note) => {\r\n            if(!this.state.hatOff) {\r\n                if(note!==\"\" && Math.random()<0.80) {\r\n                    this.hat.triggerAttack(note);\r\n                }\r\n            }\r\n        }, [\"C4\",\"C4\",\"C4\",\"C4\",\"C4\",\"C4\",\"C4\",\"C4\"], \"4n\");\r\n        \r\n        this.kickLoop.humanize = true;\r\n        this.snareLoop.humanize = true;\r\n        this.hatLoop.humanize = true;\r\n\r\n        this.nextChord = this.nextChord.bind(this);\r\n        this.playChord = this.playChord.bind(this);\r\n        this.playMelody = this.playMelody.bind(this);\r\n    }\r\n\r\n\r\n    nextChord = () => {\r\n        const nextProgress = this.state.progress === this.state.progression.length-1 ? 0 : this.state.progress+1;\r\n        if(this.state.progress===4) {\r\n            let nextKickOff = Math.random()<0.15;\r\n            let nextSnareOff = Math.random()<0.20;\r\n            let nextHatOff = Math.random()<0.25;\r\n\r\n            this.setState({...this.state,\r\n                progress: nextProgress,\r\n                kickOff: nextKickOff,\r\n                snareOff: nextSnareOff,\r\n                hatOff: nextHatOff\r\n            });\r\n        } else if (this.state.progress===0) {\r\n            let nextKickOff = Math.random()<0.15;\r\n            let nextSnareOff = Math.random()<0.20;\r\n            let nextHatOff = Math.random()<0.25;\r\n\r\n            let nextMelodyDensity = Math.random()*0.66;\r\n\r\n            this.setState({...this.state,\r\n                progress: nextProgress,\r\n                kickOff: nextKickOff,\r\n                snareOff: nextSnareOff,\r\n                hatOff: nextHatOff,\r\n                melodyDensity: nextMelodyDensity\r\n            });\r\n            \r\n        } else {\r\n            this.setState({...this.state,\r\n                progress: nextProgress,\r\n            });\r\n        }\r\n        \r\n    }\r\n\r\n    playChord = () => {\r\n        const chord = this.state.progression[this.state.progress];\r\n        const root = Tone.Frequency(this.state.key+\"3\").transpose(chord.semitoneDist);\r\n        const size = 4;\r\n        const voicing = chord.generateVoicing(size);\r\n        const notes = Tone.Frequency(root).harmonize(voicing).map(f => Tone.Frequency(f).toNote());\r\n        this.nextChord();\r\n        this.pn.triggerAttackRelease(notes,\"1n\");\r\n    }\r\n\r\n    playMelody = () => {\r\n        const chord = this.state.progression[this.state.progress];\r\n        const root = Tone.Frequency(this.state.key+\"5\").transpose(chord.semitoneDist);\r\n        const scale = chord.intervals.map(n => {\r\n            if(n>=12)\r\n                return n-12;\r\n            else\r\n                return n;\r\n        });\r\n        const notes = Tone.Frequency(root).harmonize(scale).map(f => Tone.Frequency(f).toNote());\r\n        let noteIdx = Math.floor(Math.random()*notes.length);\r\n        if(Math.random()<this.state.melodyDensity)\r\n            this.pn.triggerAttackRelease(notes[noteIdx]);\r\n    }\r\n\r\n    generateProgression = () => {\r\n        this.setState({\r\n            key: keys[Math.floor(Math.random()*keys.length)], \r\n            progress: 0, \r\n            progression: ChordProgression.generate(8),\r\n            genChordsOnce: true});\r\n    }\r\n\r\n    toggle = () => {\r\n        this.setState({...this.state, progress: 0});\r\n        if(Tone.Transport.state === \"started\") {\r\n            Tone.Transport.stop();\r\n            this.noise.stop();\r\n        }\r\n        else {\r\n            this.noise.start(0);\r\n            this.chords.start(0);\r\n            this.melody.start(0);\r\n            this.kickLoop.start(0);\r\n            this.snareLoop.start(0);\r\n            this.hatLoop.start(0);\r\n            Tone.Transport.start();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const progressionList = this.state.progression.map((chord,idx) => {\r\n            return (\r\n            <li className={idx===(this.state.progress+7)%8 ? \"live\" : \"\"} key={idx}>\r\n                {chord.degree}\r\n                \r\n            </li>\r\n        )});\r\n\r\n        const prep = (\r\n            <div className=\"prep\">\r\n                <div className=\"sampleLoad\">\r\n                    {!(this.state.pianoLoaded && this.state.kickLoaded && this.state.snareLoaded && this.state.hatLoaded) ?\r\n                        \"loAding sAmples\" :\r\n                        this.state.contextStarted ? \"\" : \r\n                            <button\r\n                                className=\"contextBtn\"\r\n                                onClick={() => {\r\n                                    Tone.start();\r\n                                    this.setState({...this.state, contextStarted: true});\r\n                                }}\r\n                            >\r\n                                stArt Audio context\r\n                            </button>}\r\n                </div>\r\n            </div>\r\n        );\r\n\r\n        const playable = (\r\n            <div className=\"playable\">\r\n                <button \r\n                    className=\"generateBtn\"\r\n                    onClick={this.generateProgression}>\r\n                        generAte cHords\r\n                </button>\r\n                {!(this.state.genChordsOnce) ? \"\" : \r\n                    <div>\r\n                        <div className=\"info\">\r\n                            <h3 className=\"key\">{this.state.key.toLowerCase()}</h3>\r\n                            <ol className=\"progressionList\">{progressionList}</ol>\r\n                        </div>\r\n                        \r\n                        <button \r\n                            className=\"playBtn\"\r\n                            onClick={this.toggle}>\r\n                                {Tone.Transport.state===\"started\" ? \"stop\" : \"plAy\"}\r\n                        </button>\r\n                    </div>\r\n                }\r\n            </div>\r\n        );\r\n\r\n        const visual = (\r\n            <section className=\"visualizer\">\r\n                <Visualizer audio={Tone.Master}/>\r\n            </section>\r\n        );\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"content\">\r\n                    <div className=\"title\">\r\n                        <h1>lofi generAtor</h1>\r\n                        <h5>by Vin-HuynH</h5>\r\n                    </div>\r\n                    <div className=\"instructions\">\r\n                        <h3>How to use lofigen</h3>\r\n                        <ol>\r\n                            {!(this.state.pianoLoaded && this.state.kickLoaded && this.state.snareLoaded && this.state.hatLoaded) ?\r\n                                <li>WAit for sAmples to loAd</li> : \"\"}\r\n                            {!(this.state.contextStarted) ? \r\n                                <li>stArt Audio context</li> : \"\"}\r\n                            <li>generAte cHords</li>\r\n                            <li>press plAy And enjoy</li>\r\n                        </ol>\r\n                    </div>\r\n                    {this.state.pianoLoaded && this.state.kickLoaded && this.state.snareLoaded && this.state.hatLoaded &&\r\n                        this.state.contextStarted ? playable : prep}\r\n                </div>\r\n                <section className={\"gradient \" + this.state.key.replace(\"#\",\"s\")}></section>\r\n                {Tone.Transport.state === \"started\" ? visual : \"\"}\r\n                <section className=\"backdrop\"></section>\r\n            </div>\r\n            \r\n        );\r\n    }\r\n}\r\n\r\nexport default Player;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Player from './Components/Player';\nimport player from './Components/Player';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Player />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}